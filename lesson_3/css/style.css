@import url("reset.css");

/* //////////////////////////////////////// HEADER /////////////////////////////////////////////// */



.list .item{ 
  color: red;  /*цей запит більш точний ніж той, що знизу = більший пріоритет */
}
header .item{
  color: darkgreen;
}

.summer-item{
   color: white; /*я думав що воно перетворить цей ітем на білий, бо калс ".summer-item" один на сторінці, але ж для css два класа одного елемента мають ОДНАКОВИЙ пріоритет. Тому для нього звертання "header .list .item" залишається точнішим */
}

.spring-item + .item {
  color: white;
}
 .spring-item + li {/*не діє, тому що над ним діє більш точний селектор, що дає запит по класу, а не по хтмл тегу. Ще він не діє тому що ".list .item" звертається по класу і він є більш уточнюючим (По задумці мав би змінитися колір в калсі .summer-item)*/
  color: red;
}


.spring-item + .item + .item {
  color: orange; /* ВАУ, можна ще плюсувати на певну кількість вперед. Це для мене прям відкриття, хоча це не мало б дивувати, все логічно */
}

.spring-item ~ .item{
  color: blue; /*  Дуже цікаве спостереження: Не діє на клас "autumn-item" (там йде точніший запит через 2 плюси). Але діє на winter-item та, що головніше, на spring-item (де 1 плюс). Тобто роблю висновок, що кількість плючів впливає на пріоритет. Ще в + та ~ однаковий пріоритет. Якщо видалити цей запит, то буде діяти ".spring-item + .item" і .summer-item стане білим. Але якщо білий був би під цим селеткором, то знову був би білий, що відтверджує однаковість пріоритету. А ще ~ діє не тільки на наступні елементи цієї ж вклдаеності, а й на попередні елементи тої ж вклдаеності */
} 

header > .list > .autumn-item{
   color: #ff008c; /*Не діє. Тут така сама ситуація для класу "autumn-item".  */
}
header > .list > .autumn-item.item{
  color: #22ff00; /*Діє. Оскльіки ми чітко дали знати каскадним стилям про наявність єдиного елементу на сайті, де одночасно наявні 2 стилі. Якщо закоментувати цей селектор, то буде оранжевий колір*/
}


h1 {
  color: #670567;
}

/* ////////////////////////////////////////// SPRING BLOCK ///////////////////////////////////////////////// */

/* Демонстрація роботи прицнипу "Для однакового селектеру, пріритет присвоєння значення буде застосовуватися до найнищого" */

/*цей запит діє не тільки на параграфи всердеині блоку text а й на ВСІ влкдаені селектори. Оскільки параграфи мають вкладений spam, яким колір не був заданий, то саме вони приймають червоний колір*/
.spring .block-1 .text *{ 
  color: red;
}

.spring .block-1 .text p{ /*цей запит більш точний. Зертається САМЕ до параграфів, хоч і знаходиться вище по коду */
  color: blue;
}

.spring {
  color: #ff0000; /*дане значення не працює оскльки наявні більш уточнюючі селеткори*/
}

.spring .sub-title {
  color: #ff0000;
}

.spring .sub-title {
  color: #90ffaa;  /*демонстрація роботи даного прицнипу - для однак. класів, пріоритет діє для того, що нище */
}



.spring .block-2 {
 /* Наслідує червоний колір від класу .spring */
 
}
.spring .block-2 span{
  color: black;
 }


/* ////////////////////////////////////////// SUMMER BLOCK ///////////////////////////////////////////////// */
/* .summer p{
  color: #22ff00;
}
.summer .block-1 {
  color: white;
} */

.summer {
  color: #89812f;
}
.summer .sub-title {
  color: #bfb439;
}



/* ////////////// AUTUMN BLOCK ///////////////////// */
.autumn {
  color: orange;
}
.autumn .sub-title {
  color: #f7cc7d;
}


.autumn .item + .item{
 color: rgb(77, 255, 0); 
}
.autumn .item + .item + .item + .item{
  color: blue; /* Дивне використання атрибуту "+", суть якого полягає в застосуванні значення починаючи з класу ."item"*n, де n це номер елемента включно  */
 }
 .autumn .item + .item{
  color: rgb(255, 158, 182); /* Переписати значення можна для тих атрибутів, де використана така сама кількість плюсів. Як було в ситуації з класом spring-item - більше плюсів = більший пріоритет*/
 }
 .autumn .item ~ .item ~ .item ~ .item{
    /*color: white; Для маніпуляцій елементів класів одного рівня через ці ж елементи можєна використовувати як + так і ~. В такій ситуації вони працюють однаково*/
 }

/* ////////////// WINTER BLOCK ///////////////////// */
.winter .text{
  color: #1b1b29;
}
.winter .text{
  color: blue; 
}
.winter .sub-title, #winter .block-2 {
   color: #616172; /*клас block-2 Не буде мати такий же колір як і клас sub-title, оскільки зверху було точніше звернення, хоч тут і було використано звернення по селектору айді */
}
section.winter .block-2 .text{
  color: red;
}
.winter .block-2 div.text{
  color: red;
}
/* section.winter .block-2 div.text{
  color: red;
} */
/* section.winter div.block-2 div.text{
  color: rgb(115, 0, 255);
} */

.winter div.block-2 .text {
   color: #c2a0a0; /* додавши уточнення до якого тега треба звернутися, в якого є клас "block-2" він стає більш пріоритетнішим, ніж звернення ".winter .block-2 .text". Але пріоритет такий самий як у section.winter .block-2 .text АБО .winter .block-2 div.text АЛЕ МЕНШИЙ НІЖ В section.winter .block-2 div.text АБО section.winter div.block-2 div.text*/
}
.winter div.block-2 [class*="text"] {
   color: #7a5252; /*пріоритет поідбний до селеткора вище, що й казав Євген */
}
.winter .block-2 .text{
  color: #000000;
}

/* .winter .block-2 .text {
  color: white;
} */



